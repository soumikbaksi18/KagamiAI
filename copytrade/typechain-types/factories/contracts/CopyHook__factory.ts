/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { CopyHook, CopyHookInterface } from "../../contracts/CopyHook";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_copyRelay",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "copyRelay",
        type: "address",
      },
    ],
    name: "HookInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "TradeDetected",
    type: "event",
  },
  {
    inputs: [],
    name: "copyRelay",
    outputs: [
      {
        internalType: "contract CopyRelay",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCopyRelay",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "processTrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161040138038061040183398101604081905261002f9161007a565b600080546001600160a01b0319166001600160a01b038316908117825560405190917fe50284478261fed0815ef629a0cf0afa4c7cf8a1b91d19088e578c2a3430c59e91a2506100aa565b60006020828403121561008c57600080fd5b81516001600160a01b03811681146100a357600080fd5b9392505050565b610348806100b96000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634be269381461004657806355dcfd5e1461006f5780637edf9d6514610082575b600080fd5b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b600054610053906001600160a01b031681565b610095610090366004610271565b610097565b005b60008054906101000a90046001600160a01b03166001600160a01b031663d6a45aa56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010c91906102cc565b6040516362bdd31360e01b81526001600160a01b03878116600483015291909116906362bdd31390602401602060405180830381865afa158015610154573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017891906102f0565b1561025257826001600160a01b0316846001600160a01b0316866001600160a01b03167ede1392d1f121dc77f30eae521f3609c0050261db10b5a8904c25f316c685b585856040516101d4929190918252602082015260400190565b60405180910390a4600054604051635c83c30b60e11b81526001600160a01b038681166004830152858116602483015260448201859052606482018490529091169063b907861690608401600060405180830381600087803b15801561023957600080fd5b505af115801561024d573d6000803e3d6000fd5b505050505b5050505050565b6001600160a01b038116811461026e57600080fd5b50565b600080600080600060a0868803121561028957600080fd5b853561029481610259565b945060208601356102a481610259565b935060408601356102b481610259565b94979396509394606081013594506080013592915050565b6000602082840312156102de57600080fd5b81516102e981610259565b9392505050565b60006020828403121561030257600080fd5b815180151581146102e957600080fdfea2646970667358221220bee3f0d63ac4eb73947a1e1f53a280b33bb99139bc41aad2221c8f9d2924fffc64736f6c63430008140033";

type CopyHookConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CopyHookConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CopyHook__factory extends ContractFactory {
  constructor(...args: CopyHookConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _copyRelay: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_copyRelay, overrides || {});
  }
  override deploy(
    _copyRelay: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_copyRelay, overrides || {}) as Promise<
      CopyHook & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CopyHook__factory {
    return super.connect(runner) as CopyHook__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CopyHookInterface {
    return new Interface(_abi) as CopyHookInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CopyHook {
    return new Contract(address, _abi, runner) as unknown as CopyHook;
  }
}
