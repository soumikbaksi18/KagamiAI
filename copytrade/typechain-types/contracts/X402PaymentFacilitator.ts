/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace X402PaymentFacilitator {
  export type PaymentRequestStruct = {
    requestId: BytesLike;
    payer: AddressLike;
    payee: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    serviceType: string;
    resourceId: BytesLike;
    timestamp: BigNumberish;
    isPaid: boolean;
    isSettled: boolean;
  };

  export type PaymentRequestStructOutput = [
    requestId: string,
    payer: string,
    payee: string,
    token: string,
    amount: bigint,
    serviceType: string,
    resourceId: string,
    timestamp: bigint,
    isPaid: boolean,
    isSettled: boolean
  ] & {
    requestId: string;
    payer: string;
    payee: string;
    token: string;
    amount: bigint;
    serviceType: string;
    resourceId: string;
    timestamp: bigint;
    isPaid: boolean;
    isSettled: boolean;
  };

  export type SubscriptionStruct = {
    follower: AddressLike;
    leader: AddressLike;
    paymentToken: AddressLike;
    monthlyFee: BigNumberish;
    lastPayment: BigNumberish;
    nextPayment: BigNumberish;
    isActive: boolean;
    autoRenew: boolean;
  };

  export type SubscriptionStructOutput = [
    follower: string,
    leader: string,
    paymentToken: string,
    monthlyFee: bigint,
    lastPayment: bigint,
    nextPayment: bigint,
    isActive: boolean,
    autoRenew: boolean
  ] & {
    follower: string;
    leader: string;
    paymentToken: string;
    monthlyFee: bigint;
    lastPayment: bigint;
    nextPayment: bigint;
    isActive: boolean;
    autoRenew: boolean;
  };
}

export interface X402PaymentFacilitatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSupportedToken"
      | "collectPerformanceFee"
      | "copyRelay"
      | "createSubscription"
      | "getPaymentRequest"
      | "getSubscription"
      | "getSupportedTokens"
      | "nextRequestId"
      | "owner"
      | "paymentRequests"
      | "performanceFees"
      | "processRefund"
      | "processSubscriptionPayment"
      | "renounceOwnership"
      | "settlePayment"
      | "subscriptions"
      | "supportedTokens"
      | "tokenList"
      | "transferOwnership"
      | "verifyPayment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PaymentRequired"
      | "PaymentSettled"
      | "PaymentVerified"
      | "PerformanceFeeTriggered"
      | "RefundProcessed"
      | "SubscriptionCreated"
      | "SubscriptionPayment"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPerformanceFee",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "copyRelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFees",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processRefund",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "processSubscriptionPayment",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settlePayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPayment",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "copyRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processSubscriptionPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPayment",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRequiredEvent {
  export type InputTuple = [
    requestId: BytesLike,
    payer: AddressLike,
    payee: AddressLike,
    amount: BigNumberish,
    token: AddressLike,
    serviceType: string
  ];
  export type OutputTuple = [
    requestId: string,
    payer: string,
    payee: string,
    amount: bigint,
    token: string,
    serviceType: string
  ];
  export interface OutputObject {
    requestId: string;
    payer: string;
    payee: string;
    amount: bigint;
    token: string;
    serviceType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSettledEvent {
  export type InputTuple = [
    requestId: BytesLike,
    payer: AddressLike,
    payee: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: string,
    payer: string,
    payee: string,
    amount: bigint
  ];
  export interface OutputObject {
    requestId: string;
    payer: string;
    payee: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentVerifiedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    payer: AddressLike,
    isValid: boolean
  ];
  export type OutputTuple = [
    requestId: string,
    payer: string,
    isValid: boolean
  ];
  export interface OutputObject {
    requestId: string;
    payer: string;
    isValid: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeeTriggeredEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    tradeId: BigNumberish,
    profit: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    tradeId: bigint,
    profit: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    tradeId: bigint;
    profit: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundProcessedEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    monthlyFee: BigNumberish,
    token: AddressLike
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    monthlyFee: bigint,
    token: string
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    monthlyFee: bigint;
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionPaymentEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    amount: BigNumberish,
    nextPayment: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    amount: bigint,
    nextPayment: bigint
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    amount: bigint;
    nextPayment: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface X402PaymentFacilitator extends BaseContract {
  connect(runner?: ContractRunner | null): X402PaymentFacilitator;
  waitForDeployment(): Promise<this>;

  interface: X402PaymentFacilitatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSupportedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  collectPerformanceFee: TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      tradeId: BigNumberish,
      profit: BigNumberish,
      token: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  copyRelay: TypedContractMethod<[], [string], "view">;

  createSubscription: TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      monthlyFee: BigNumberish,
      paymentToken: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  getPaymentRequest: TypedContractMethod<
    [requestId: BytesLike],
    [X402PaymentFacilitator.PaymentRequestStructOutput],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [X402PaymentFacilitator.SubscriptionStructOutput],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<[], [string[]], "view">;

  nextRequestId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        boolean
      ] & {
        requestId: string;
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        serviceType: string;
        resourceId: string;
        timestamp: bigint;
        isPaid: boolean;
        isSettled: boolean;
      }
    ],
    "view"
  >;

  performanceFees: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        follower: string;
        leader: string;
        tradeId: bigint;
        profit: bigint;
        feeAmount: bigint;
        token: string;
        isPaid: boolean;
      }
    ],
    "view"
  >;

  processRefund: TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      amount: BigNumberish,
      token: AddressLike,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  processSubscriptionPayment: TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  settlePayment: TypedContractMethod<
    [requestId: BytesLike],
    [void],
    "nonpayable"
  >;

  subscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        follower: string;
        leader: string;
        paymentToken: string;
        monthlyFee: bigint;
        lastPayment: bigint;
        nextPayment: bigint;
        isActive: boolean;
        autoRenew: boolean;
      }
    ],
    "view"
  >;

  supportedTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  tokenList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verifyPayment: TypedContractMethod<
    [requestId: BytesLike, paymentProof: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSupportedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "collectPerformanceFee"
  ): TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      tradeId: BigNumberish,
      profit: BigNumberish,
      token: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "copyRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      monthlyFee: BigNumberish,
      paymentToken: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPaymentRequest"
  ): TypedContractMethod<
    [requestId: BytesLike],
    [X402PaymentFacilitator.PaymentRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [X402PaymentFacilitator.SubscriptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "nextRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        boolean,
        boolean
      ] & {
        requestId: string;
        payer: string;
        payee: string;
        token: string;
        amount: bigint;
        serviceType: string;
        resourceId: string;
        timestamp: bigint;
        isPaid: boolean;
        isSettled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "performanceFees"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, bigint, string, boolean] & {
        follower: string;
        leader: string;
        tradeId: bigint;
        profit: bigint;
        feeAmount: bigint;
        token: string;
        isPaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processRefund"
  ): TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      amount: BigNumberish,
      token: AddressLike,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processSubscriptionPayment"
  ): TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlePayment"
  ): TypedContractMethod<[requestId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        follower: string;
        leader: string;
        paymentToken: string;
        monthlyFee: bigint;
        lastPayment: bigint;
        nextPayment: bigint;
        isActive: boolean;
        autoRenew: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyPayment"
  ): TypedContractMethod<
    [requestId: BytesLike, paymentProof: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRequired"
  ): TypedContractEvent<
    PaymentRequiredEvent.InputTuple,
    PaymentRequiredEvent.OutputTuple,
    PaymentRequiredEvent.OutputObject
  >;
  getEvent(
    key: "PaymentSettled"
  ): TypedContractEvent<
    PaymentSettledEvent.InputTuple,
    PaymentSettledEvent.OutputTuple,
    PaymentSettledEvent.OutputObject
  >;
  getEvent(
    key: "PaymentVerified"
  ): TypedContractEvent<
    PaymentVerifiedEvent.InputTuple,
    PaymentVerifiedEvent.OutputTuple,
    PaymentVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceFeeTriggered"
  ): TypedContractEvent<
    PerformanceFeeTriggeredEvent.InputTuple,
    PerformanceFeeTriggeredEvent.OutputTuple,
    PerformanceFeeTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "RefundProcessed"
  ): TypedContractEvent<
    RefundProcessedEvent.InputTuple,
    RefundProcessedEvent.OutputTuple,
    RefundProcessedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionPayment"
  ): TypedContractEvent<
    SubscriptionPaymentEvent.InputTuple,
    SubscriptionPaymentEvent.OutputTuple,
    SubscriptionPaymentEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PaymentRequired(bytes32,address,address,uint256,address,string)": TypedContractEvent<
      PaymentRequiredEvent.InputTuple,
      PaymentRequiredEvent.OutputTuple,
      PaymentRequiredEvent.OutputObject
    >;
    PaymentRequired: TypedContractEvent<
      PaymentRequiredEvent.InputTuple,
      PaymentRequiredEvent.OutputTuple,
      PaymentRequiredEvent.OutputObject
    >;

    "PaymentSettled(bytes32,address,address,uint256)": TypedContractEvent<
      PaymentSettledEvent.InputTuple,
      PaymentSettledEvent.OutputTuple,
      PaymentSettledEvent.OutputObject
    >;
    PaymentSettled: TypedContractEvent<
      PaymentSettledEvent.InputTuple,
      PaymentSettledEvent.OutputTuple,
      PaymentSettledEvent.OutputObject
    >;

    "PaymentVerified(bytes32,address,bool)": TypedContractEvent<
      PaymentVerifiedEvent.InputTuple,
      PaymentVerifiedEvent.OutputTuple,
      PaymentVerifiedEvent.OutputObject
    >;
    PaymentVerified: TypedContractEvent<
      PaymentVerifiedEvent.InputTuple,
      PaymentVerifiedEvent.OutputTuple,
      PaymentVerifiedEvent.OutputObject
    >;

    "PerformanceFeeTriggered(address,address,uint256,uint256,uint256)": TypedContractEvent<
      PerformanceFeeTriggeredEvent.InputTuple,
      PerformanceFeeTriggeredEvent.OutputTuple,
      PerformanceFeeTriggeredEvent.OutputObject
    >;
    PerformanceFeeTriggered: TypedContractEvent<
      PerformanceFeeTriggeredEvent.InputTuple,
      PerformanceFeeTriggeredEvent.OutputTuple,
      PerformanceFeeTriggeredEvent.OutputObject
    >;

    "RefundProcessed(address,address,uint256,string)": TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;
    RefundProcessed: TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;

    "SubscriptionCreated(address,address,uint256,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionPayment(address,address,uint256,uint256)": TypedContractEvent<
      SubscriptionPaymentEvent.InputTuple,
      SubscriptionPaymentEvent.OutputTuple,
      SubscriptionPaymentEvent.OutputObject
    >;
    SubscriptionPayment: TypedContractEvent<
      SubscriptionPaymentEvent.InputTuple,
      SubscriptionPaymentEvent.OutputTuple,
      SubscriptionPaymentEvent.OutputObject
    >;
  };
}
