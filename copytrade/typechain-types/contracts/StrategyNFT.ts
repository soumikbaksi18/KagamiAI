/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StrategyNFT {
  export type StrategyStruct = {
    leader: AddressLike;
    name: string;
    description: string;
    performanceFee: BigNumberish;
    isActive: boolean;
    totalFollowers: BigNumberish;
    totalVolume: BigNumberish;
    createdAt: BigNumberish;
  };

  export type StrategyStructOutput = [
    leader: string,
    name: string,
    description: string,
    performanceFee: bigint,
    isActive: boolean,
    totalFollowers: bigint,
    totalVolume: bigint,
    createdAt: bigint
  ] & {
    leader: string;
    name: string;
    description: string;
    performanceFee: bigint;
    isActive: boolean;
    totalFollowers: bigint;
    totalVolume: bigint;
    createdAt: bigint;
  };
}

export interface StrategyNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "copyRelay"
      | "createStrategy"
      | "getApproved"
      | "getStrategy"
      | "getStrategyByLeader"
      | "isApprovedForAll"
      | "isLeader"
      | "isStrategyLeader"
      | "leaderToTokenId"
      | "name"
      | "owner"
      | "ownerOf"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setCopyRelay"
      | "strategies"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalStrategies"
      | "transferFrom"
      | "transferOwnership"
      | "updateFollowerCount"
      | "updateStrategy"
      | "updateVolume"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "FollowerAdded"
      | "FollowerRemoved"
      | "OwnershipTransferred"
      | "StrategyCreated"
      | "StrategyUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "copyRelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createStrategy",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyByLeader",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLeader",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrategyLeader",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderToTokenId",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCopyRelay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strategies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStrategies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFollowerCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStrategy",
    values: [BigNumberish, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVolume",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copyRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyByLeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLeader", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStrategyLeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderToTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCopyRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStrategies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFollowerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVolume",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FollowerAddedEvent {
  export type InputTuple = [tokenId: BigNumberish, follower: AddressLike];
  export type OutputTuple = [tokenId: bigint, follower: string];
  export interface OutputObject {
    tokenId: bigint;
    follower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FollowerRemovedEvent {
  export type InputTuple = [tokenId: BigNumberish, follower: AddressLike];
  export type OutputTuple = [tokenId: bigint, follower: string];
  export interface OutputObject {
    tokenId: bigint;
    follower: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    leader: AddressLike,
    name: string,
    performanceFee: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    leader: string,
    name: string,
    performanceFee: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    leader: string;
    name: string;
    performanceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyUpdatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    name: string,
    description: string,
    performanceFee: BigNumberish,
    isActive: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    name: string,
    description: string,
    performanceFee: bigint,
    isActive: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    name: string;
    description: string;
    performanceFee: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrategyNFT extends BaseContract {
  connect(runner?: ContractRunner | null): StrategyNFT;
  waitForDeployment(): Promise<this>;

  interface: StrategyNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  copyRelay: TypedContractMethod<[], [string], "view">;

  createStrategy: TypedContractMethod<
    [name: string, description: string, performanceFee: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getStrategy: TypedContractMethod<
    [tokenId: BigNumberish],
    [StrategyNFT.StrategyStructOutput],
    "view"
  >;

  getStrategyByLeader: TypedContractMethod<
    [leader: AddressLike],
    [StrategyNFT.StrategyStructOutput],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isLeader: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isStrategyLeader: TypedContractMethod<
    [leader: AddressLike],
    [boolean],
    "view"
  >;

  leaderToTokenId: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setCopyRelay: TypedContractMethod<
    [_copyRelay: AddressLike],
    [void],
    "nonpayable"
  >;

  strategies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint, bigint, bigint] & {
        leader: string;
        name: string;
        description: string;
        performanceFee: bigint;
        isActive: boolean;
        totalFollowers: bigint;
        totalVolume: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalStrategies: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFollowerCount: TypedContractMethod<
    [tokenId: BigNumberish, delta: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateStrategy: TypedContractMethod<
    [
      tokenId: BigNumberish,
      name: string,
      description: string,
      performanceFee: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;

  updateVolume: TypedContractMethod<
    [tokenId: BigNumberish, volume: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "copyRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createStrategy"
  ): TypedContractMethod<
    [name: string, description: string, performanceFee: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategy"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [StrategyNFT.StrategyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStrategyByLeader"
  ): TypedContractMethod<
    [leader: AddressLike],
    [StrategyNFT.StrategyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLeader"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isStrategyLeader"
  ): TypedContractMethod<[leader: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "leaderToTokenId"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCopyRelay"
  ): TypedContractMethod<[_copyRelay: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "strategies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint, bigint, bigint] & {
        leader: string;
        name: string;
        description: string;
        performanceFee: bigint;
        isActive: boolean;
        totalFollowers: bigint;
        totalVolume: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalStrategies"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFollowerCount"
  ): TypedContractMethod<
    [tokenId: BigNumberish, delta: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStrategy"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      name: string,
      description: string,
      performanceFee: BigNumberish,
      isActive: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateVolume"
  ): TypedContractMethod<
    [tokenId: BigNumberish, volume: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "FollowerAdded"
  ): TypedContractEvent<
    FollowerAddedEvent.InputTuple,
    FollowerAddedEvent.OutputTuple,
    FollowerAddedEvent.OutputObject
  >;
  getEvent(
    key: "FollowerRemoved"
  ): TypedContractEvent<
    FollowerRemovedEvent.InputTuple,
    FollowerRemovedEvent.OutputTuple,
    FollowerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "StrategyCreated"
  ): TypedContractEvent<
    StrategyCreatedEvent.InputTuple,
    StrategyCreatedEvent.OutputTuple,
    StrategyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyUpdated"
  ): TypedContractEvent<
    StrategyUpdatedEvent.InputTuple,
    StrategyUpdatedEvent.OutputTuple,
    StrategyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "FollowerAdded(uint256,address)": TypedContractEvent<
      FollowerAddedEvent.InputTuple,
      FollowerAddedEvent.OutputTuple,
      FollowerAddedEvent.OutputObject
    >;
    FollowerAdded: TypedContractEvent<
      FollowerAddedEvent.InputTuple,
      FollowerAddedEvent.OutputTuple,
      FollowerAddedEvent.OutputObject
    >;

    "FollowerRemoved(uint256,address)": TypedContractEvent<
      FollowerRemovedEvent.InputTuple,
      FollowerRemovedEvent.OutputTuple,
      FollowerRemovedEvent.OutputObject
    >;
    FollowerRemoved: TypedContractEvent<
      FollowerRemovedEvent.InputTuple,
      FollowerRemovedEvent.OutputTuple,
      FollowerRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "StrategyCreated(uint256,address,string,uint256)": TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;
    StrategyCreated: TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;

    "StrategyUpdated(uint256,string,string,uint256,bool)": TypedContractEvent<
      StrategyUpdatedEvent.InputTuple,
      StrategyUpdatedEvent.OutputTuple,
      StrategyUpdatedEvent.OutputObject
    >;
    StrategyUpdated: TypedContractEvent<
      StrategyUpdatedEvent.InputTuple,
      StrategyUpdatedEvent.OutputTuple,
      StrategyUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
