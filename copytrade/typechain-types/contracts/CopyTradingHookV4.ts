/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CopyTradingHookV4 {
  export type PendingTradeStruct = {
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PendingTradeStructOutput = [
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    timestamp: bigint
  ] & {
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    timestamp: bigint;
  };
}

export interface CopyTradingHookV4Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "afterSwap"
      | "beforeSwap"
      | "copyRelay"
      | "copyTradingPools"
      | "getPendingTrade"
      | "isCopyTradingEnabled"
      | "pauseCopyTrading"
      | "poolManager"
      | "registerPool"
      | "triggerCopyTrade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CopyTradeExecuted"
      | "LeaderTradeDetected"
      | "PoolRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "afterSwap",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeSwap",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "copyRelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "copyTradingPools",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingTrade",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCopyTradingEnabled",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseCopyTrading",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerCopyTrade",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "afterSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "copyRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "copyTradingPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCopyTradingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseCopyTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerCopyTrade",
    data: BytesLike
  ): Result;
}

export namespace CopyTradeExecutedEvent {
  export type InputTuple = [
    leader: AddressLike,
    follower: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    leader: string,
    follower: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    leader: string;
    follower: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaderTradeDetectedEvent {
  export type InputTuple = [
    leader: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    leader: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    leader: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolRegisteredEvent {
  export type InputTuple = [poolId: BytesLike, copyTradingEnabled: boolean];
  export type OutputTuple = [poolId: string, copyTradingEnabled: boolean];
  export interface OutputObject {
    poolId: string;
    copyTradingEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CopyTradingHookV4 extends BaseContract {
  connect(runner?: ContractRunner | null): CopyTradingHookV4;
  waitForDeployment(): Promise<this>;

  interface: CopyTradingHookV4Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  afterSwap: TypedContractMethod<
    [
      trader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  beforeSwap: TypedContractMethod<
    [
      trader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;

  copyRelay: TypedContractMethod<[], [string], "view">;

  copyTradingPools: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  getPendingTrade: TypedContractMethod<
    [trader: AddressLike],
    [CopyTradingHookV4.PendingTradeStructOutput],
    "view"
  >;

  isCopyTradingEnabled: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [boolean],
    "view"
  >;

  pauseCopyTrading: TypedContractMethod<
    [poolId: BytesLike],
    [void],
    "nonpayable"
  >;

  poolManager: TypedContractMethod<[], [string], "view">;

  registerPool: TypedContractMethod<
    [poolId: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;

  triggerCopyTrade: TypedContractMethod<
    [
      leader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "afterSwap"
  ): TypedContractMethod<
    [
      trader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "beforeSwap"
  ): TypedContractMethod<
    [
      trader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "copyRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "copyTradingPools"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getPendingTrade"
  ): TypedContractMethod<
    [trader: AddressLike],
    [CopyTradingHookV4.PendingTradeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCopyTradingEnabled"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pauseCopyTrading"
  ): TypedContractMethod<[poolId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "poolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerPool"
  ): TypedContractMethod<
    [poolId: BytesLike, enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "triggerCopyTrade"
  ): TypedContractMethod<
    [
      leader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CopyTradeExecuted"
  ): TypedContractEvent<
    CopyTradeExecutedEvent.InputTuple,
    CopyTradeExecutedEvent.OutputTuple,
    CopyTradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "LeaderTradeDetected"
  ): TypedContractEvent<
    LeaderTradeDetectedEvent.InputTuple,
    LeaderTradeDetectedEvent.OutputTuple,
    LeaderTradeDetectedEvent.OutputObject
  >;
  getEvent(
    key: "PoolRegistered"
  ): TypedContractEvent<
    PoolRegisteredEvent.InputTuple,
    PoolRegisteredEvent.OutputTuple,
    PoolRegisteredEvent.OutputObject
  >;

  filters: {
    "CopyTradeExecuted(address,address,uint256,uint256)": TypedContractEvent<
      CopyTradeExecutedEvent.InputTuple,
      CopyTradeExecutedEvent.OutputTuple,
      CopyTradeExecutedEvent.OutputObject
    >;
    CopyTradeExecuted: TypedContractEvent<
      CopyTradeExecutedEvent.InputTuple,
      CopyTradeExecutedEvent.OutputTuple,
      CopyTradeExecutedEvent.OutputObject
    >;

    "LeaderTradeDetected(address,address,address,uint256,uint256)": TypedContractEvent<
      LeaderTradeDetectedEvent.InputTuple,
      LeaderTradeDetectedEvent.OutputTuple,
      LeaderTradeDetectedEvent.OutputObject
    >;
    LeaderTradeDetected: TypedContractEvent<
      LeaderTradeDetectedEvent.InputTuple,
      LeaderTradeDetectedEvent.OutputTuple,
      LeaderTradeDetectedEvent.OutputObject
    >;

    "PoolRegistered(bytes32,bool)": TypedContractEvent<
      PoolRegisteredEvent.InputTuple,
      PoolRegisteredEvent.OutputTuple,
      PoolRegisteredEvent.OutputObject
    >;
    PoolRegistered: TypedContractEvent<
      PoolRegisteredEvent.InputTuple,
      PoolRegisteredEvent.OutputTuple,
      PoolRegisteredEvent.OutputObject
    >;
  };
}
