/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CopyHookInterface extends Interface {
  getFunction(
    nameOrSignature: "copyRelay" | "getCopyRelay" | "processTrade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "HookInitialized" | "TradeDetected"
  ): EventFragment;

  encodeFunctionData(functionFragment: "copyRelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCopyRelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processTrade",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "copyRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCopyRelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processTrade",
    data: BytesLike
  ): Result;
}

export namespace HookInitializedEvent {
  export type InputTuple = [copyRelay: AddressLike];
  export type OutputTuple = [copyRelay: string];
  export interface OutputObject {
    copyRelay: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeDetectedEvent {
  export type InputTuple = [
    trader: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    trader: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CopyHook extends BaseContract {
  connect(runner?: ContractRunner | null): CopyHook;
  waitForDeployment(): Promise<this>;

  interface: CopyHookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  copyRelay: TypedContractMethod<[], [string], "view">;

  getCopyRelay: TypedContractMethod<[], [string], "view">;

  processTrade: TypedContractMethod<
    [
      trader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "copyRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCopyRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "processTrade"
  ): TypedContractMethod<
    [
      trader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "HookInitialized"
  ): TypedContractEvent<
    HookInitializedEvent.InputTuple,
    HookInitializedEvent.OutputTuple,
    HookInitializedEvent.OutputObject
  >;
  getEvent(
    key: "TradeDetected"
  ): TypedContractEvent<
    TradeDetectedEvent.InputTuple,
    TradeDetectedEvent.OutputTuple,
    TradeDetectedEvent.OutputObject
  >;

  filters: {
    "HookInitialized(address)": TypedContractEvent<
      HookInitializedEvent.InputTuple,
      HookInitializedEvent.OutputTuple,
      HookInitializedEvent.OutputObject
    >;
    HookInitialized: TypedContractEvent<
      HookInitializedEvent.InputTuple,
      HookInitializedEvent.OutputTuple,
      HookInitializedEvent.OutputObject
    >;

    "TradeDetected(address,address,address,uint256,uint256)": TypedContractEvent<
      TradeDetectedEvent.InputTuple,
      TradeDetectedEvent.OutputTuple,
      TradeDetectedEvent.OutputObject
    >;
    TradeDetected: TypedContractEvent<
      TradeDetectedEvent.InputTuple,
      TradeDetectedEvent.OutputTuple,
      TradeDetectedEvent.OutputObject
    >;
  };
}
