/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace OneInchPriceOracle {
  export type MarketDataStruct = {
    totalLiquidity: BigNumberish;
    priceImpact: BigNumberish;
    liquiditySources: AddressLike[];
    confidence: BigNumberish;
  };

  export type MarketDataStructOutput = [
    totalLiquidity: bigint,
    priceImpact: bigint,
    liquiditySources: string[],
    confidence: bigint
  ] & {
    totalLiquidity: bigint;
    priceImpact: bigint;
    liquiditySources: string[];
    confidence: bigint;
  };
}

export interface OneInchPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPriceUpdater"
      | "addSupportedToken"
      | "checkPriceFreshness"
      | "getMarketData"
      | "getSupportedTokens"
      | "getSwapQuote"
      | "getTokenPrice"
      | "getTradingRecommendation"
      | "isSupported"
      | "marketData"
      | "owner"
      | "priceUpdaters"
      | "removePriceUpdater"
      | "renounceOwnership"
      | "supportedTokens"
      | "tokenPrices"
      | "transferOwnership"
      | "updateMarketData"
      | "updateTokenPrice"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MarketDataUpdated"
      | "OwnershipTransferred"
      | "PriceUpdated"
      | "PriceUpdaterAdded"
      | "PriceUpdaterRemoved"
      | "TokenAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPriceUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedToken",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPriceFreshness",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapQuote",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingRecommendation",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupported",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceUpdaters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removePriceUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPrices",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketData",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenPrice",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPriceUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceFreshness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingRecommendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceUpdaters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePriceUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenPrice",
    data: BytesLike
  ): Result;
}

export namespace MarketDataUpdatedEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    totalLiquidity: BigNumberish,
    priceImpact: BigNumberish,
    confidence: BigNumberish
  ];
  export type OutputTuple = [
    tokenA: string,
    tokenB: string,
    totalLiquidity: bigint,
    priceImpact: bigint,
    confidence: bigint
  ];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    totalLiquidity: bigint;
    priceImpact: bigint;
    confidence: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    price: BigNumberish,
    volume24h: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    price: bigint,
    volume24h: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    price: bigint;
    volume24h: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdaterAddedEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdaterRemovedEvent {
  export type InputTuple = [updater: AddressLike];
  export type OutputTuple = [updater: string];
  export interface OutputObject {
    updater: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenAddedEvent {
  export type InputTuple = [token: AddressLike, symbol: string];
  export type OutputTuple = [token: string, symbol: string];
  export interface OutputObject {
    token: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OneInchPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): OneInchPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: OneInchPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPriceUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  addSupportedToken: TypedContractMethod<
    [token: AddressLike, symbol: string],
    [void],
    "nonpayable"
  >;

  checkPriceFreshness: TypedContractMethod<
    [tokens: AddressLike[]],
    [[boolean, string[]] & { allFresh: boolean; stalePrices: string[] }],
    "view"
  >;

  getMarketData: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [OneInchPriceOracle.MarketDataStructOutput],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<[], [string[]], "view">;

  getSwapQuote: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amountOut: bigint;
        priceImpact: bigint;
        confidence: bigint;
      }
    ],
    "view"
  >;

  getTokenPrice: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, boolean] & {
        price: bigint;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  getTradingRecommendation: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [
      [boolean, boolean, string] & {
        useLimit: boolean;
        useTWAP: boolean;
        reason: string;
      }
    ],
    "view"
  >;

  isSupported: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  marketData: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint] & {
        totalLiquidity: bigint;
        priceImpact: bigint;
        confidence: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  priceUpdaters: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  removePriceUpdater: TypedContractMethod<
    [updater: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  supportedTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokenPrices: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        price: bigint;
        timestamp: bigint;
        volume24h: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMarketData: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      totalLiquidity: BigNumberish,
      priceImpact: BigNumberish,
      liquiditySources: AddressLike[],
      confidence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateTokenPrice: TypedContractMethod<
    [token: AddressLike, price: BigNumberish, volume24h: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPriceUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSupportedToken"
  ): TypedContractMethod<
    [token: AddressLike, symbol: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkPriceFreshness"
  ): TypedContractMethod<
    [tokens: AddressLike[]],
    [[boolean, string[]] & { allFresh: boolean; stalePrices: string[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketData"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [OneInchPriceOracle.MarketDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSwapQuote"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amountOut: bigint;
        priceImpact: bigint;
        confidence: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenPrice"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, boolean] & {
        price: bigint;
        timestamp: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradingRecommendation"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [
      [boolean, boolean, string] & {
        useLimit: boolean;
        useTWAP: boolean;
        reason: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSupported"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketData"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint, bigint] & {
        totalLiquidity: bigint;
        priceImpact: bigint;
        confidence: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "priceUpdaters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removePriceUpdater"
  ): TypedContractMethod<[updater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenPrices"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, boolean] & {
        price: bigint;
        timestamp: bigint;
        volume24h: bigint;
        isValid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMarketData"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      totalLiquidity: BigNumberish,
      priceImpact: BigNumberish,
      liquiditySources: AddressLike[],
      confidence: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTokenPrice"
  ): TypedContractMethod<
    [token: AddressLike, price: BigNumberish, volume24h: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MarketDataUpdated"
  ): TypedContractEvent<
    MarketDataUpdatedEvent.InputTuple,
    MarketDataUpdatedEvent.OutputTuple,
    MarketDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdaterAdded"
  ): TypedContractEvent<
    PriceUpdaterAddedEvent.InputTuple,
    PriceUpdaterAddedEvent.OutputTuple,
    PriceUpdaterAddedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdaterRemoved"
  ): TypedContractEvent<
    PriceUpdaterRemovedEvent.InputTuple,
    PriceUpdaterRemovedEvent.OutputTuple,
    PriceUpdaterRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokenAdded"
  ): TypedContractEvent<
    TokenAddedEvent.InputTuple,
    TokenAddedEvent.OutputTuple,
    TokenAddedEvent.OutputObject
  >;

  filters: {
    "MarketDataUpdated(address,address,uint256,uint256,uint256)": TypedContractEvent<
      MarketDataUpdatedEvent.InputTuple,
      MarketDataUpdatedEvent.OutputTuple,
      MarketDataUpdatedEvent.OutputObject
    >;
    MarketDataUpdated: TypedContractEvent<
      MarketDataUpdatedEvent.InputTuple,
      MarketDataUpdatedEvent.OutputTuple,
      MarketDataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(address,uint256,uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "PriceUpdaterAdded(address)": TypedContractEvent<
      PriceUpdaterAddedEvent.InputTuple,
      PriceUpdaterAddedEvent.OutputTuple,
      PriceUpdaterAddedEvent.OutputObject
    >;
    PriceUpdaterAdded: TypedContractEvent<
      PriceUpdaterAddedEvent.InputTuple,
      PriceUpdaterAddedEvent.OutputTuple,
      PriceUpdaterAddedEvent.OutputObject
    >;

    "PriceUpdaterRemoved(address)": TypedContractEvent<
      PriceUpdaterRemovedEvent.InputTuple,
      PriceUpdaterRemovedEvent.OutputTuple,
      PriceUpdaterRemovedEvent.OutputObject
    >;
    PriceUpdaterRemoved: TypedContractEvent<
      PriceUpdaterRemovedEvent.InputTuple,
      PriceUpdaterRemovedEvent.OutputTuple,
      PriceUpdaterRemovedEvent.OutputObject
    >;

    "TokenAdded(address,string)": TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
    TokenAdded: TypedContractEvent<
      TokenAddedEvent.InputTuple,
      TokenAddedEvent.OutputTuple,
      TokenAddedEvent.OutputObject
    >;
  };
}
