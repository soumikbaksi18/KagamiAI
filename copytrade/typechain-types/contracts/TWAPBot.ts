/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace TWAPBot {
  export type TWAPOrderStruct = {
    user: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    totalAmountIn: BigNumberish;
    amountPerInterval: BigNumberish;
    intervalSeconds: BigNumberish;
    executedAmount: BigNumberish;
    remainingIntervals: BigNumberish;
    lastExecutionTime: BigNumberish;
    minAmountOut: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type TWAPOrderStructOutput = [
    user: string,
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: bigint,
    amountPerInterval: bigint,
    intervalSeconds: bigint,
    executedAmount: bigint,
    remainingIntervals: bigint,
    lastExecutionTime: bigint,
    minAmountOut: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    user: string;
    tokenIn: string;
    tokenOut: string;
    totalAmountIn: bigint;
    amountPerInterval: bigint;
    intervalSeconds: bigint;
    executedAmount: bigint;
    remainingIntervals: bigint;
    lastExecutionTime: bigint;
    minAmountOut: bigint;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface TWAPBotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canExecuteOrder"
      | "cancelTWAPOrder"
      | "createTWAPOrder"
      | "emergencyWithdraw"
      | "executeTWAPInterval"
      | "executionFee"
      | "getExecutableOrders"
      | "getOrder"
      | "getUserOrders"
      | "limitOrderProtocol"
      | "nextOrderId"
      | "oneInchRouter"
      | "orders"
      | "owner"
      | "renounceOwnership"
      | "setExecutionFee"
      | "setOneInchRouter"
      | "transferOwnership"
      | "userOrders"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "TWAPExecuted"
      | "TWAPOrderCancelled"
      | "TWAPOrderCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canExecuteOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTWAPOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTWAPOrder",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTWAPInterval",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutableOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrderProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneInchRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userOrders",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "canExecuteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTWAPOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTWAPOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTWAPInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutableOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitOrderProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneInchRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneInchRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOrders", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPExecutedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    user: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    remainingIntervals: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    user: string,
    amountIn: bigint,
    amountOut: bigint,
    remainingIntervals: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    user: string;
    amountIn: bigint;
    amountOut: bigint;
    remainingIntervals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPOrderCancelledEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    user: AddressLike,
    refundAmount: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    user: string,
    refundAmount: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    user: string;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPOrderCreatedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    user: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    totalAmountIn: BigNumberish,
    intervals: BigNumberish,
    intervalSeconds: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    user: string,
    tokenIn: string,
    tokenOut: string,
    totalAmountIn: bigint,
    intervals: bigint,
    intervalSeconds: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    user: string;
    tokenIn: string;
    tokenOut: string;
    totalAmountIn: bigint;
    intervals: bigint;
    intervalSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TWAPBot extends BaseContract {
  connect(runner?: ContractRunner | null): TWAPBot;
  waitForDeployment(): Promise<this>;

  interface: TWAPBotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canExecuteOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [boolean],
    "view"
  >;

  cancelTWAPOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTWAPOrder: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      totalAmountIn: BigNumberish,
      intervals: BigNumberish,
      intervalSeconds: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTWAPInterval: TypedContractMethod<
    [orderId: BigNumberish, swapData: BytesLike],
    [void],
    "nonpayable"
  >;

  executionFee: TypedContractMethod<[], [bigint], "view">;

  getExecutableOrders: TypedContractMethod<[], [bigint[]], "view">;

  getOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [TWAPBot.TWAPOrderStructOutput],
    "view"
  >;

  getUserOrders: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  limitOrderProtocol: TypedContractMethod<[], [string], "view">;

  nextOrderId: TypedContractMethod<[], [bigint], "view">;

  oneInchRouter: TypedContractMethod<[], [string], "view">;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        user: string;
        tokenIn: string;
        tokenOut: string;
        totalAmountIn: bigint;
        amountPerInterval: bigint;
        intervalSeconds: bigint;
        executedAmount: bigint;
        remainingIntervals: bigint;
        lastExecutionTime: bigint;
        minAmountOut: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setExecutionFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOneInchRouter: TypedContractMethod<
    [newRouter: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canExecuteOrder"
  ): TypedContractMethod<[orderId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cancelTWAPOrder"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTWAPOrder"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      totalAmountIn: BigNumberish,
      intervals: BigNumberish,
      intervalSeconds: BigNumberish,
      minAmountOut: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeTWAPInterval"
  ): TypedContractMethod<
    [orderId: BigNumberish, swapData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executionFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExecutableOrders"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [orderId: BigNumberish],
    [TWAPBot.TWAPOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserOrders"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "limitOrderProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextOrderId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oneInchRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint
      ] & {
        user: string;
        tokenIn: string;
        tokenOut: string;
        totalAmountIn: bigint;
        amountPerInterval: bigint;
        intervalSeconds: bigint;
        executedAmount: bigint;
        remainingIntervals: bigint;
        lastExecutionTime: bigint;
        minAmountOut: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExecutionFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOneInchRouter"
  ): TypedContractMethod<[newRouter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TWAPExecuted"
  ): TypedContractEvent<
    TWAPExecutedEvent.InputTuple,
    TWAPExecutedEvent.OutputTuple,
    TWAPExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TWAPOrderCancelled"
  ): TypedContractEvent<
    TWAPOrderCancelledEvent.InputTuple,
    TWAPOrderCancelledEvent.OutputTuple,
    TWAPOrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "TWAPOrderCreated"
  ): TypedContractEvent<
    TWAPOrderCreatedEvent.InputTuple,
    TWAPOrderCreatedEvent.OutputTuple,
    TWAPOrderCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TWAPExecuted(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      TWAPExecutedEvent.InputTuple,
      TWAPExecutedEvent.OutputTuple,
      TWAPExecutedEvent.OutputObject
    >;
    TWAPExecuted: TypedContractEvent<
      TWAPExecutedEvent.InputTuple,
      TWAPExecutedEvent.OutputTuple,
      TWAPExecutedEvent.OutputObject
    >;

    "TWAPOrderCancelled(uint256,address,uint256)": TypedContractEvent<
      TWAPOrderCancelledEvent.InputTuple,
      TWAPOrderCancelledEvent.OutputTuple,
      TWAPOrderCancelledEvent.OutputObject
    >;
    TWAPOrderCancelled: TypedContractEvent<
      TWAPOrderCancelledEvent.InputTuple,
      TWAPOrderCancelledEvent.OutputTuple,
      TWAPOrderCancelledEvent.OutputObject
    >;

    "TWAPOrderCreated(uint256,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      TWAPOrderCreatedEvent.InputTuple,
      TWAPOrderCreatedEvent.OutputTuple,
      TWAPOrderCreatedEvent.OutputObject
    >;
    TWAPOrderCreated: TypedContractEvent<
      TWAPOrderCreatedEvent.InputTuple,
      TWAPOrderCreatedEvent.OutputTuple,
      TWAPOrderCreatedEvent.OutputObject
    >;
  };
}
