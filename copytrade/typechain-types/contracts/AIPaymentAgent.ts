/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AIPaymentAgent {
  export type TradeAnalysisStruct = {
    tradeId: BigNumberish;
    leader: AddressLike;
    followers: AddressLike[];
    totalVolume: BigNumberish;
    totalPnL: BigNumberish;
    isProfitable: boolean;
    timestamp: BigNumberish;
  };

  export type TradeAnalysisStructOutput = [
    tradeId: bigint,
    leader: string,
    followers: string[],
    totalVolume: bigint,
    totalPnL: bigint,
    isProfitable: boolean,
    timestamp: bigint
  ] & {
    tradeId: bigint;
    leader: string;
    followers: string[];
    totalVolume: bigint;
    totalPnL: bigint;
    isProfitable: boolean;
    timestamp: bigint;
  };
}

export interface AIPaymentAgentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "analyzeMarketConditions"
      | "analyzeTrade"
      | "assessRiskAndRefund"
      | "consecutiveLosses"
      | "copyRelay"
      | "generateTradingSummary"
      | "getConsecutiveLosses"
      | "getTradeAnalysis"
      | "minRefundAmount"
      | "nextTradeId"
      | "owner"
      | "paymentFacilitator"
      | "performanceFeeThreshold"
      | "processSubscriptionRenewals"
      | "refundThreshold"
      | "refundTriggers"
      | "renounceOwnership"
      | "tradeAnalyses"
      | "transferOwnership"
      | "updateAIThresholds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AIDecision"
      | "OwnershipTransferred"
      | "PerformanceFeeCollected"
      | "RefundTriggered"
      | "SubscriptionRenewalProcessed"
      | "TradeAnalyzed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "analyzeMarketConditions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "analyzeTrade",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assessRiskAndRefund",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consecutiveLosses",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "copyRelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateTradingSummary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConsecutiveLosses",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeAnalysis",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minRefundAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTradeId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentFacilitator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFeeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processSubscriptionRenewals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundTriggers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeAnalyses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAIThresholds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "analyzeMarketConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "analyzeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assessRiskAndRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consecutiveLosses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "copyRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateTradingSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConsecutiveLosses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeAnalysis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRefundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTradeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentFacilitator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceFeeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processSubscriptionRenewals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundTriggers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeAnalyses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAIThresholds",
    data: BytesLike
  ): Result;
}

export namespace AIDecisionEvent {
  export type InputTuple = [
    action: string,
    target: AddressLike,
    amount: BigNumberish,
    reasoning: string
  ];
  export type OutputTuple = [
    action: string,
    target: string,
    amount: bigint,
    reasoning: string
  ];
  export interface OutputObject {
    action: string;
    target: string;
    amount: bigint;
    reasoning: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeeCollectedEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    profit: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    profit: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    profit: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundTriggeredEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionRenewalProcessedEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [follower: string, leader: string, amount: bigint];
  export interface OutputObject {
    follower: string;
    leader: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeAnalyzedEvent {
  export type InputTuple = [
    tradeId: BigNumberish,
    leader: AddressLike,
    followerCount: BigNumberish,
    totalPnL: BigNumberish,
    isProfitable: boolean
  ];
  export type OutputTuple = [
    tradeId: bigint,
    leader: string,
    followerCount: bigint,
    totalPnL: bigint,
    isProfitable: boolean
  ];
  export interface OutputObject {
    tradeId: bigint;
    leader: string;
    followerCount: bigint;
    totalPnL: bigint;
    isProfitable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIPaymentAgent extends BaseContract {
  connect(runner?: ContractRunner | null): AIPaymentAgent;
  waitForDeployment(): Promise<this>;

  interface: AIPaymentAgentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  analyzeMarketConditions: TypedContractMethod<
    [leader: AddressLike],
    [[boolean, string] & { shouldPause: boolean; reason: string }],
    "view"
  >;

  analyzeTrade: TypedContractMethod<
    [
      leader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  assessRiskAndRefund: TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [void],
    "nonpayable"
  >;

  consecutiveLosses: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  copyRelay: TypedContractMethod<[], [string], "view">;

  generateTradingSummary: TypedContractMethod<
    [leader: AddressLike, period: BigNumberish],
    [string],
    "view"
  >;

  getConsecutiveLosses: TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [bigint],
    "view"
  >;

  getTradeAnalysis: TypedContractMethod<
    [tradeId: BigNumberish],
    [AIPaymentAgent.TradeAnalysisStructOutput],
    "view"
  >;

  minRefundAmount: TypedContractMethod<[], [bigint], "view">;

  nextTradeId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paymentFacilitator: TypedContractMethod<[], [string], "view">;

  performanceFeeThreshold: TypedContractMethod<[], [bigint], "view">;

  processSubscriptionRenewals: TypedContractMethod<[], [void], "nonpayable">;

  refundThreshold: TypedContractMethod<[], [bigint], "view">;

  refundTriggers: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, string, boolean] & {
        follower: string;
        leader: string;
        lossAmount: bigint;
        consecutiveLosses: bigint;
        reason: string;
        isProcessed: boolean;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  tradeAnalyses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, bigint] & {
        tradeId: bigint;
        leader: string;
        totalVolume: bigint;
        totalPnL: bigint;
        isProfitable: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateAIThresholds: TypedContractMethod<
    [
      newRefundThreshold: BigNumberish,
      newMinRefundAmount: BigNumberish,
      newPerformanceFeeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "analyzeMarketConditions"
  ): TypedContractMethod<
    [leader: AddressLike],
    [[boolean, string] & { shouldPause: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "analyzeTrade"
  ): TypedContractMethod<
    [
      leader: AddressLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assessRiskAndRefund"
  ): TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "consecutiveLosses"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "copyRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateTradingSummary"
  ): TypedContractMethod<
    [leader: AddressLike, period: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConsecutiveLosses"
  ): TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradeAnalysis"
  ): TypedContractMethod<
    [tradeId: BigNumberish],
    [AIPaymentAgent.TradeAnalysisStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "minRefundAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTradeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paymentFacilitator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performanceFeeThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "processSubscriptionRenewals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundTriggers"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, string, boolean] & {
        follower: string;
        leader: string;
        lossAmount: bigint;
        consecutiveLosses: bigint;
        reason: string;
        isProcessed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tradeAnalyses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, bigint] & {
        tradeId: bigint;
        leader: string;
        totalVolume: bigint;
        totalPnL: bigint;
        isProfitable: boolean;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateAIThresholds"
  ): TypedContractMethod<
    [
      newRefundThreshold: BigNumberish,
      newMinRefundAmount: BigNumberish,
      newPerformanceFeeThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AIDecision"
  ): TypedContractEvent<
    AIDecisionEvent.InputTuple,
    AIDecisionEvent.OutputTuple,
    AIDecisionEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceFeeCollected"
  ): TypedContractEvent<
    PerformanceFeeCollectedEvent.InputTuple,
    PerformanceFeeCollectedEvent.OutputTuple,
    PerformanceFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "RefundTriggered"
  ): TypedContractEvent<
    RefundTriggeredEvent.InputTuple,
    RefundTriggeredEvent.OutputTuple,
    RefundTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionRenewalProcessed"
  ): TypedContractEvent<
    SubscriptionRenewalProcessedEvent.InputTuple,
    SubscriptionRenewalProcessedEvent.OutputTuple,
    SubscriptionRenewalProcessedEvent.OutputObject
  >;
  getEvent(
    key: "TradeAnalyzed"
  ): TypedContractEvent<
    TradeAnalyzedEvent.InputTuple,
    TradeAnalyzedEvent.OutputTuple,
    TradeAnalyzedEvent.OutputObject
  >;

  filters: {
    "AIDecision(string,address,uint256,string)": TypedContractEvent<
      AIDecisionEvent.InputTuple,
      AIDecisionEvent.OutputTuple,
      AIDecisionEvent.OutputObject
    >;
    AIDecision: TypedContractEvent<
      AIDecisionEvent.InputTuple,
      AIDecisionEvent.OutputTuple,
      AIDecisionEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PerformanceFeeCollected(address,address,uint256,uint256)": TypedContractEvent<
      PerformanceFeeCollectedEvent.InputTuple,
      PerformanceFeeCollectedEvent.OutputTuple,
      PerformanceFeeCollectedEvent.OutputObject
    >;
    PerformanceFeeCollected: TypedContractEvent<
      PerformanceFeeCollectedEvent.InputTuple,
      PerformanceFeeCollectedEvent.OutputTuple,
      PerformanceFeeCollectedEvent.OutputObject
    >;

    "RefundTriggered(address,address,uint256,string)": TypedContractEvent<
      RefundTriggeredEvent.InputTuple,
      RefundTriggeredEvent.OutputTuple,
      RefundTriggeredEvent.OutputObject
    >;
    RefundTriggered: TypedContractEvent<
      RefundTriggeredEvent.InputTuple,
      RefundTriggeredEvent.OutputTuple,
      RefundTriggeredEvent.OutputObject
    >;

    "SubscriptionRenewalProcessed(address,address,uint256)": TypedContractEvent<
      SubscriptionRenewalProcessedEvent.InputTuple,
      SubscriptionRenewalProcessedEvent.OutputTuple,
      SubscriptionRenewalProcessedEvent.OutputObject
    >;
    SubscriptionRenewalProcessed: TypedContractEvent<
      SubscriptionRenewalProcessedEvent.InputTuple,
      SubscriptionRenewalProcessedEvent.OutputTuple,
      SubscriptionRenewalProcessedEvent.OutputObject
    >;

    "TradeAnalyzed(uint256,address,uint256,int256,bool)": TypedContractEvent<
      TradeAnalyzedEvent.InputTuple,
      TradeAnalyzedEvent.OutputTuple,
      TradeAnalyzedEvent.OutputObject
    >;
    TradeAnalyzed: TypedContractEvent<
      TradeAnalyzedEvent.InputTuple,
      TradeAnalyzedEvent.OutputTuple,
      TradeAnalyzedEvent.OutputObject
    >;
  };
}
