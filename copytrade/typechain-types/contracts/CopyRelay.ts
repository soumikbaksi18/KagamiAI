/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace CopyRelay {
  export type SubscriptionStruct = {
    follower: AddressLike;
    leader: AddressLike;
    strategyId: BigNumberish;
    subscriptionFee: BigNumberish;
    performanceFee: BigNumberish;
    isActive: boolean;
    subscribedAt: BigNumberish;
    lastTradeTime: BigNumberish;
  };

  export type SubscriptionStructOutput = [
    follower: string,
    leader: string,
    strategyId: bigint,
    subscriptionFee: bigint,
    performanceFee: bigint,
    isActive: boolean,
    subscribedAt: bigint,
    lastTradeTime: bigint
  ] & {
    follower: string;
    leader: string;
    strategyId: bigint;
    subscriptionFee: bigint;
    performanceFee: bigint;
    isActive: boolean;
    subscribedAt: bigint;
    lastTradeTime: bigint;
  };
}

export interface CopyRelayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "executeTrade"
      | "feeRecipient"
      | "followerToLeaders"
      | "getFollowers"
      | "getLeaders"
      | "getSubscription"
      | "leaderToFollowers"
      | "mirrorTrade"
      | "owner"
      | "platformFee"
      | "renounceOwnership"
      | "strategyNFT"
      | "subscribe"
      | "subscriptions"
      | "totalSubscriptions"
      | "totalTrades"
      | "trades"
      | "transferOwnership"
      | "triggerRefund"
      | "unsubscribe"
      | "updateFeeRecipient"
      | "updatePlatformFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeRecipientUpdated"
      | "FollowerJoined"
      | "FollowerLeft"
      | "OwnershipTransferred"
      | "PlatformFeeUpdated"
      | "RefundTriggered"
      | "TradeExecuted"
      | "TradeMirrored"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "executeTrade",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "followerToLeaders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderToFollowers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorTrade",
    values: [BytesLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategyNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubscriptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "trades", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerRefund",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "followerToLeaders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLeaders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderToFollowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategyNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trades", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [
    oldRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [oldRecipient: string, newRecipient: string];
  export interface OutputObject {
    oldRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FollowerJoinedEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    strategyId: BigNumberish,
    subscriptionFee: BigNumberish,
    performanceFee: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    strategyId: bigint,
    subscriptionFee: bigint,
    performanceFee: bigint
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    strategyId: bigint;
    subscriptionFee: bigint;
    performanceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FollowerLeftEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    strategyId: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    strategyId: bigint
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    strategyId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundTriggeredEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    amount: bigint,
    reason: string
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeExecutedEvent {
  export type InputTuple = [
    tradeId: BytesLike,
    leader: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tradeId: string,
    leader: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    tradeId: string;
    leader: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeMirroredEvent {
  export type InputTuple = [
    follower: AddressLike,
    leader: AddressLike,
    tradeId: BytesLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    follower: string,
    leader: string,
    tradeId: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    follower: string;
    leader: string;
    tradeId: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CopyRelay extends BaseContract {
  connect(runner?: ContractRunner | null): CopyRelay;
  waitForDeployment(): Promise<this>;

  interface: CopyRelayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  executeTrade: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  followerToLeaders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFollowers: TypedContractMethod<[leader: AddressLike], [string[]], "view">;

  getLeaders: TypedContractMethod<[follower: AddressLike], [string[]], "view">;

  getSubscription: TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [CopyRelay.SubscriptionStructOutput],
    "view"
  >;

  leaderToFollowers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  mirrorTrade: TypedContractMethod<
    [
      tradeId: BytesLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  strategyNFT: TypedContractMethod<[], [string], "view">;

  subscribe: TypedContractMethod<
    [leader: AddressLike, subscriptionFeePaid: BigNumberish],
    [void],
    "payable"
  >;

  subscriptions: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint, bigint] & {
        follower: string;
        leader: string;
        strategyId: bigint;
        subscriptionFee: bigint;
        performanceFee: bigint;
        isActive: boolean;
        subscribedAt: bigint;
        lastTradeTime: bigint;
      }
    ],
    "view"
  >;

  totalSubscriptions: TypedContractMethod<[], [bigint], "view">;

  totalTrades: TypedContractMethod<[], [bigint], "view">;

  trades: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        leader: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        amountOut: bigint;
        timestamp: bigint;
        isExecuted: boolean;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  triggerRefund: TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      amount: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  unsubscribe: TypedContractMethod<[leader: AddressLike], [void], "nonpayable">;

  updateFeeRecipient: TypedContractMethod<
    [newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePlatformFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "executeTrade"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "followerToLeaders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFollowers"
  ): TypedContractMethod<[leader: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getLeaders"
  ): TypedContractMethod<[follower: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [follower: AddressLike, leader: AddressLike],
    [CopyRelay.SubscriptionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "leaderToFollowers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "mirrorTrade"
  ): TypedContractMethod<
    [
      tradeId: BytesLike,
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "strategyNFT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<
    [leader: AddressLike, subscriptionFeePaid: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, string, bigint, bigint, bigint, boolean, bigint, bigint] & {
        follower: string;
        leader: string;
        strategyId: bigint;
        subscriptionFee: bigint;
        performanceFee: bigint;
        isActive: boolean;
        subscribedAt: bigint;
        lastTradeTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSubscriptions"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTrades"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trades"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, boolean] & {
        leader: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        amountOut: bigint;
        timestamp: bigint;
        isExecuted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "triggerRefund"
  ): TypedContractMethod<
    [
      follower: AddressLike,
      leader: AddressLike,
      amount: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unsubscribe"
  ): TypedContractMethod<[leader: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRecipient"
  ): TypedContractMethod<[newRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePlatformFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FollowerJoined"
  ): TypedContractEvent<
    FollowerJoinedEvent.InputTuple,
    FollowerJoinedEvent.OutputTuple,
    FollowerJoinedEvent.OutputObject
  >;
  getEvent(
    key: "FollowerLeft"
  ): TypedContractEvent<
    FollowerLeftEvent.InputTuple,
    FollowerLeftEvent.OutputTuple,
    FollowerLeftEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RefundTriggered"
  ): TypedContractEvent<
    RefundTriggeredEvent.InputTuple,
    RefundTriggeredEvent.OutputTuple,
    RefundTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "TradeExecuted"
  ): TypedContractEvent<
    TradeExecutedEvent.InputTuple,
    TradeExecutedEvent.OutputTuple,
    TradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TradeMirrored"
  ): TypedContractEvent<
    TradeMirroredEvent.InputTuple,
    TradeMirroredEvent.OutputTuple,
    TradeMirroredEvent.OutputObject
  >;

  filters: {
    "FeeRecipientUpdated(address,address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "FollowerJoined(address,address,uint256,uint256,uint256)": TypedContractEvent<
      FollowerJoinedEvent.InputTuple,
      FollowerJoinedEvent.OutputTuple,
      FollowerJoinedEvent.OutputObject
    >;
    FollowerJoined: TypedContractEvent<
      FollowerJoinedEvent.InputTuple,
      FollowerJoinedEvent.OutputTuple,
      FollowerJoinedEvent.OutputObject
    >;

    "FollowerLeft(address,address,uint256)": TypedContractEvent<
      FollowerLeftEvent.InputTuple,
      FollowerLeftEvent.OutputTuple,
      FollowerLeftEvent.OutputObject
    >;
    FollowerLeft: TypedContractEvent<
      FollowerLeftEvent.InputTuple,
      FollowerLeftEvent.OutputTuple,
      FollowerLeftEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256,uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "RefundTriggered(address,address,uint256,string)": TypedContractEvent<
      RefundTriggeredEvent.InputTuple,
      RefundTriggeredEvent.OutputTuple,
      RefundTriggeredEvent.OutputObject
    >;
    RefundTriggered: TypedContractEvent<
      RefundTriggeredEvent.InputTuple,
      RefundTriggeredEvent.OutputTuple,
      RefundTriggeredEvent.OutputObject
    >;

    "TradeExecuted(bytes32,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;
    TradeExecuted: TypedContractEvent<
      TradeExecutedEvent.InputTuple,
      TradeExecutedEvent.OutputTuple,
      TradeExecutedEvent.OutputObject
    >;

    "TradeMirrored(address,address,bytes32,uint256,uint256)": TypedContractEvent<
      TradeMirroredEvent.InputTuple,
      TradeMirroredEvent.OutputTuple,
      TradeMirroredEvent.OutputObject
    >;
    TradeMirrored: TypedContractEvent<
      TradeMirroredEvent.InputTuple,
      TradeMirroredEvent.OutputTuple,
      TradeMirroredEvent.OutputObject
    >;
  };
}
