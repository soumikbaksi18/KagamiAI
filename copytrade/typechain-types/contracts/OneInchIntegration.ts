/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace OneInchIntegration {
  export type LimitOrderStruct = {
    orderId: BigNumberish;
    maker: AddressLike;
    tokenIn: AddressLike;
    tokenOut: AddressLike;
    amountIn: BigNumberish;
    minAmountOut: BigNumberish;
    deadline: BigNumberish;
    isActive: boolean;
    isTWAP: boolean;
    twapDuration: BigNumberish;
    executedAmount: BigNumberish;
    createdAt: BigNumberish;
  };

  export type LimitOrderStructOutput = [
    orderId: bigint,
    maker: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    minAmountOut: bigint,
    deadline: bigint,
    isActive: boolean,
    isTWAP: boolean,
    twapDuration: bigint,
    executedAmount: bigint,
    createdAt: bigint
  ] & {
    orderId: bigint;
    maker: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    minAmountOut: bigint;
    deadline: bigint;
    isActive: boolean;
    isTWAP: boolean;
    twapDuration: bigint;
    executedAmount: bigint;
    createdAt: bigint;
  };

  export type TWAPOrderStruct = {
    totalAmount: BigNumberish;
    intervalDuration: BigNumberish;
    numberOfIntervals: BigNumberish;
    currentInterval: BigNumberish;
    lastExecutionTime: BigNumberish;
    amountPerInterval: BigNumberish;
  };

  export type TWAPOrderStructOutput = [
    totalAmount: bigint,
    intervalDuration: bigint,
    numberOfIntervals: bigint,
    currentInterval: bigint,
    lastExecutionTime: bigint,
    amountPerInterval: bigint
  ] & {
    totalAmount: bigint;
    intervalDuration: bigint;
    numberOfIntervals: bigint;
    currentInterval: bigint;
    lastExecutionTime: bigint;
    amountPerInterval: bigint;
  };
}

export interface OneInchIntegrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelOrder"
      | "copyRelay"
      | "executeTWAPInterval"
      | "getLeaderOrders"
      | "getOrder"
      | "getQuote"
      | "getTWAPOrder"
      | "leaderOrders"
      | "limitOrderProtocol"
      | "limitOrders"
      | "nextOrderId"
      | "owner"
      | "placeLimitOrder"
      | "placeTWAPOrder"
      | "renounceOwnership"
      | "transferOwnership"
      | "twapOrders"
      | "updateLimitOrderProtocol"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LimitOrderExecuted"
      | "LimitOrderPlaced"
      | "OrderCancelled"
      | "OwnershipTransferred"
      | "PriceDataUpdated"
      | "TWAPIntervalExecuted"
      | "TWAPOrderCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "copyRelay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeTWAPInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderOrders",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTWAPOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaderOrders",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrderProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeLimitOrder",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeTWAPOrder",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "twapOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLimitOrderProtocol",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "copyRelay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTWAPInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTWAPOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaderOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitOrderProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeTWAPOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twapOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLimitOrderProtocol",
    data: BytesLike
  ): Result;
}

export namespace LimitOrderExecutedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    leader: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    isPartialFill: boolean
  ];
  export type OutputTuple = [
    orderId: bigint,
    leader: string,
    amountIn: bigint,
    amountOut: bigint,
    isPartialFill: boolean
  ];
  export interface OutputObject {
    orderId: bigint;
    leader: string;
    amountIn: bigint;
    amountOut: bigint;
    isPartialFill: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitOrderPlacedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    leader: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    minAmountOut: BigNumberish,
    deadline: BigNumberish,
    isTWAP: boolean
  ];
  export type OutputTuple = [
    orderId: bigint,
    leader: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    minAmountOut: bigint,
    deadline: bigint,
    isTWAP: boolean
  ];
  export interface OutputObject {
    orderId: bigint;
    leader: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    minAmountOut: bigint;
    deadline: bigint;
    isTWAP: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCancelledEvent {
  export type InputTuple = [orderId: BigNumberish, leader: AddressLike];
  export type OutputTuple = [orderId: bigint, leader: string];
  export interface OutputObject {
    orderId: bigint;
    leader: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceDataUpdatedEvent {
  export type InputTuple = [
    token: AddressLike,
    price: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [token: string, price: bigint, timestamp: bigint];
  export interface OutputObject {
    token: string;
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPIntervalExecutedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    intervalNumber: BigNumberish,
    amountExecuted: BigNumberish,
    amountReceived: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    intervalNumber: bigint,
    amountExecuted: bigint,
    amountReceived: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    intervalNumber: bigint;
    amountExecuted: bigint;
    amountReceived: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TWAPOrderCreatedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    leader: AddressLike,
    totalAmount: BigNumberish,
    intervals: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    leader: string,
    totalAmount: bigint,
    intervals: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    leader: string;
    totalAmount: bigint;
    intervals: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OneInchIntegration extends BaseContract {
  connect(runner?: ContractRunner | null): OneInchIntegration;
  waitForDeployment(): Promise<this>;

  interface: OneInchIntegrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  copyRelay: TypedContractMethod<[], [string], "view">;

  executeTWAPInterval: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getLeaderOrders: TypedContractMethod<
    [leader: AddressLike],
    [bigint[]],
    "view"
  >;

  getOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [OneInchIntegration.LimitOrderStructOutput],
    "view"
  >;

  getQuote: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  getTWAPOrder: TypedContractMethod<
    [orderId: BigNumberish],
    [OneInchIntegration.TWAPOrderStructOutput],
    "view"
  >;

  leaderOrders: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  limitOrderProtocol: TypedContractMethod<[], [string], "view">;

  limitOrders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        orderId: bigint;
        maker: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        minAmountOut: bigint;
        deadline: bigint;
        isActive: boolean;
        isTWAP: boolean;
        twapDuration: bigint;
        executedAmount: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  nextOrderId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  placeLimitOrder: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  placeTWAPOrder: TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      totalAmount: BigNumberish,
      minAmountOut: BigNumberish,
      intervalDuration: BigNumberish,
      numberOfIntervals: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  twapOrders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        intervalDuration: bigint;
        numberOfIntervals: bigint;
        currentInterval: bigint;
        lastExecutionTime: bigint;
        amountPerInterval: bigint;
      }
    ],
    "view"
  >;

  updateLimitOrderProtocol: TypedContractMethod<
    [newProtocol: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "copyRelay"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "executeTWAPInterval"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getLeaderOrders"
  ): TypedContractMethod<[leader: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getOrder"
  ): TypedContractMethod<
    [orderId: BigNumberish],
    [OneInchIntegration.LimitOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuote"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, amountIn: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTWAPOrder"
  ): TypedContractMethod<
    [orderId: BigNumberish],
    [OneInchIntegration.TWAPOrderStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "leaderOrders"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "limitOrderProtocol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "limitOrders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        orderId: bigint;
        maker: string;
        tokenIn: string;
        tokenOut: string;
        amountIn: bigint;
        minAmountOut: bigint;
        deadline: bigint;
        isActive: boolean;
        isTWAP: boolean;
        twapDuration: bigint;
        executedAmount: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextOrderId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeLimitOrder"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      amountIn: BigNumberish,
      minAmountOut: BigNumberish,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "placeTWAPOrder"
  ): TypedContractMethod<
    [
      tokenIn: AddressLike,
      tokenOut: AddressLike,
      totalAmount: BigNumberish,
      minAmountOut: BigNumberish,
      intervalDuration: BigNumberish,
      numberOfIntervals: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twapOrders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        intervalDuration: bigint;
        numberOfIntervals: bigint;
        currentInterval: bigint;
        lastExecutionTime: bigint;
        amountPerInterval: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateLimitOrderProtocol"
  ): TypedContractMethod<[newProtocol: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "LimitOrderExecuted"
  ): TypedContractEvent<
    LimitOrderExecutedEvent.InputTuple,
    LimitOrderExecutedEvent.OutputTuple,
    LimitOrderExecutedEvent.OutputObject
  >;
  getEvent(
    key: "LimitOrderPlaced"
  ): TypedContractEvent<
    LimitOrderPlacedEvent.InputTuple,
    LimitOrderPlacedEvent.OutputTuple,
    LimitOrderPlacedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCancelled"
  ): TypedContractEvent<
    OrderCancelledEvent.InputTuple,
    OrderCancelledEvent.OutputTuple,
    OrderCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceDataUpdated"
  ): TypedContractEvent<
    PriceDataUpdatedEvent.InputTuple,
    PriceDataUpdatedEvent.OutputTuple,
    PriceDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TWAPIntervalExecuted"
  ): TypedContractEvent<
    TWAPIntervalExecutedEvent.InputTuple,
    TWAPIntervalExecutedEvent.OutputTuple,
    TWAPIntervalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TWAPOrderCreated"
  ): TypedContractEvent<
    TWAPOrderCreatedEvent.InputTuple,
    TWAPOrderCreatedEvent.OutputTuple,
    TWAPOrderCreatedEvent.OutputObject
  >;

  filters: {
    "LimitOrderExecuted(uint256,address,uint256,uint256,bool)": TypedContractEvent<
      LimitOrderExecutedEvent.InputTuple,
      LimitOrderExecutedEvent.OutputTuple,
      LimitOrderExecutedEvent.OutputObject
    >;
    LimitOrderExecuted: TypedContractEvent<
      LimitOrderExecutedEvent.InputTuple,
      LimitOrderExecutedEvent.OutputTuple,
      LimitOrderExecutedEvent.OutputObject
    >;

    "LimitOrderPlaced(uint256,address,address,address,uint256,uint256,uint256,bool)": TypedContractEvent<
      LimitOrderPlacedEvent.InputTuple,
      LimitOrderPlacedEvent.OutputTuple,
      LimitOrderPlacedEvent.OutputObject
    >;
    LimitOrderPlaced: TypedContractEvent<
      LimitOrderPlacedEvent.InputTuple,
      LimitOrderPlacedEvent.OutputTuple,
      LimitOrderPlacedEvent.OutputObject
    >;

    "OrderCancelled(uint256,address)": TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;
    OrderCancelled: TypedContractEvent<
      OrderCancelledEvent.InputTuple,
      OrderCancelledEvent.OutputTuple,
      OrderCancelledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceDataUpdated(address,uint256,uint256)": TypedContractEvent<
      PriceDataUpdatedEvent.InputTuple,
      PriceDataUpdatedEvent.OutputTuple,
      PriceDataUpdatedEvent.OutputObject
    >;
    PriceDataUpdated: TypedContractEvent<
      PriceDataUpdatedEvent.InputTuple,
      PriceDataUpdatedEvent.OutputTuple,
      PriceDataUpdatedEvent.OutputObject
    >;

    "TWAPIntervalExecuted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      TWAPIntervalExecutedEvent.InputTuple,
      TWAPIntervalExecutedEvent.OutputTuple,
      TWAPIntervalExecutedEvent.OutputObject
    >;
    TWAPIntervalExecuted: TypedContractEvent<
      TWAPIntervalExecutedEvent.InputTuple,
      TWAPIntervalExecutedEvent.OutputTuple,
      TWAPIntervalExecutedEvent.OutputObject
    >;

    "TWAPOrderCreated(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      TWAPOrderCreatedEvent.InputTuple,
      TWAPOrderCreatedEvent.OutputTuple,
      TWAPOrderCreatedEvent.OutputObject
    >;
    TWAPOrderCreated: TypedContractEvent<
      TWAPOrderCreatedEvent.InputTuple,
      TWAPOrderCreatedEvent.OutputTuple,
      TWAPOrderCreatedEvent.OutputObject
    >;
  };
}
